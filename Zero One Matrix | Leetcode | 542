import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Main {
  private static class Pair {
    int x;
    int y;
    int dist;
    Pair(int x, int y  , int dist) {
      this.x = x;
      this.y = y;
      this.dist = dist;
    }
  }
  private static int[][] dir = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

  public static void main(String[] args) throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    String[] st = br.readLine().split(" ");
    int n = Integer.parseInt(st[0]);
    int m = Integer.parseInt(st[1]);

    int[][] arr = new int[n][m];

    for (int i = 0; i < n; i++) {
      st = br.readLine().split(" ");
      for (int j = 0; j < m; j++) {
        arr[i][j] = Integer.parseInt(st[j]);
      }
    }

    int[][] ans = updateMatrix(arr);

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        System.out.print(ans[i][j] + " ");
      }
      System.out.println();
    }

  }

  public static int[][] updateMatrix(int[][] matrix) {
        
        int[][] ans = new int[matrix.length][matrix[0].length];
        Queue<Pair> q = new LinkedList<>();
        
        for(int i = 0 ; i < matrix.length ; i++){
            for(int j = 0 ; j < matrix[0].length;j++){
                if(matrix[i][j] == 0){
                    q.add(new Pair(i , j , 0));
                    ans[i][j] = 0;
                }else{
                    ans[i][j] = -1;
                }
            }
        }
        
        while(!q.isEmpty()){
            Pair rem = q.remove();
            
            for(int[] d : dir){
                int r = rem.x + d[0];
                int c = rem.y + d[1];
                
                if(r < 0 || c < 0 || r >= ans.length || c >= ans[0].length || ans[r][c] != -1){
                    continue;
                }
                ans[r][c] = rem.dist + 1;
                q.add(new Pair(r , c , rem.dist + 1));
            }
            
        }
        
        return ans;
        
  }
}
