import java.util.*;
import java.io.*;
public class Main{
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int n = Integer.parseInt(br.readLine());
        String[] words = br.readLine().split(" ");
        
        ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i = 0 ; i < n ;i++) graph[i] = new ArrayList<>();
        
        for(int i = 0 ; i < n - 1 ; i++){
            String x = words[i];
            String y = words[i + 1];
            
            for(int j = 0 ; j < Math.min(x.length() , y.length()) ;j++){
                if(x.charAt(j) != y.charAt(j)){
                    graph[x.charAt(j) -'a'].add(y.charAt(j) - 'a');
                    break;
                }
            }
        }
        topological(graph , n);
    }
    public static void topological(ArrayList<Integer>[] graph , int n){
        Stack<Integer> st = new Stack<>();
        
        boolean[] visited = new boolean[n];
        for(int i = 0 ; i < n ; i++) visited[i] = false;
        
        for(int i = 0 ; i < n;i++){
            if(visited[i] == false){
                topSort(graph , visited , i , st);
            }
        }
        while(!st.isEmpty()){
             System.out.print(st.peek() + " ");
            char ch = (char)(st.pop() + 'a');
            System.out.print(ch + " ");
        }
    }
    public static void topSort(ArrayList<Integer>[] graph , boolean[] visited , int src , Stack<Integer> st){
        visited[src] = true;
        for(int nbr : graph[src]){
            if(!visited[nbr]){
                topSort(graph , visited , nbr , st);
            }
        }
        st.push(src);
    }
}
