import java.util.*;
import java.io.*;
public class Main{
    static int[][] dp ;
    static void floyedWarshell(int[][] graph){
        dp = new int[graph.length][graph[0].length];
        
        for(int i = 0 ; i < dp.length ; i++){
            for(int j = 0 ;j < dp[0].length ;j++){
                dp[i][j] = graph[i][j];
            }
        }
        
        for(int i = 0 ;i < dp.length ;i++){
            for(int j = 0 ; j < dp.length ;j++){
                for(int k = 0 ; k < dp.length ; k++){
                    if(dp[i][k] + dp[k][j] < dp[i][j]){
                        dp[i][j] = dp[i][k] + dp[k][j];
                    }
                }
            }
        }
        printSolution(dp);
    }
    static void printSolution(int dist[][])
    {
        System.out.println("The following matrix shows the shortest "+
                         "distances between every pair of vertices");
        for (int i=0; i<dist.length; ++i)
        {
            for (int j=0; j<dist.length; ++j)
            {
                if (dist[i][j]== (int)1e9)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j]+"   ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args){
        int graph[][] = { {0,   5,  (int)1e9, 10},
                          {(int)1e9, 0,   3, (int)1e9},
                          {(int)1e9, (int)1e9, 0,   1},
                          {(int)1e9, (int)1e9, (int)1e9, 0}
                        };
                        floyedWarshell(graph);
    }
}








